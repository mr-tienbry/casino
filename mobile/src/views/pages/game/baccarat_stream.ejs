<html>

<head>
  <meta charset="UTF-8">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://vigokit.oss-cn-hongkong.aliyuncs.com/vigoplayer/latest/VigoPlayer.min.js"></script>
  <script type="text/javascript" src="/game/baccarat-get-stream"></script>
  <style>
    body,
    html {
      padding: 0;
      margin: 0;
      overflow: hidden;
    }

    #svg {
      transition: all .1s ease-in-out;
    }

    #svg:hover {
      transform: scale(1);
    }
  </style>

<body>
  <canvas id="video" style="width: 100%;height: 100%;"></canvas>
  <div id="middleView-playerDiv"
    style="text-align:center; color:silver; font-size:5vh; position: absolute; top:0; left:0; right:0; background:rgb(20 17 60);font-family: 'Segoe UI', Arial, sans-serif;">
    Chạm vào đây để cho phép âm thanh </div>
</body>

<script>
  setTimeout(function () {
    $('body').click(e => {
      $('#middleView-playerDiv').hide();
    });
  }, 1000);

  setTimeout(() => {
    initPlayer();
  }, 100);

  // for debug on mobile devices
  (function () {
    var src = '//cdn.jsdelivr.net/npm/eruda';
    if (!/dev=true/.test(window.location) && localStorage.getItem('active-eruda') != 'true') return;
    document.write('<scr' + 'ipt src="' + src + '"></scr' + 'ipt>');
    document.write('<scr' + 'ipt>eruda.init();</scr' + 'ipt>');
  })();

  let ENV_DEBUG = !true;
  let STREAM_URL = "wss://hollyvnmgtm.vnkuvideo.com:8882//apps/IYJfyYAzFE1Q3fVSvQPUwA/1701639907/fyzbj0122";
  let PLAYER_DEBUG = false;

  if (!ENV_DEBUG) {
    var mydata = JSON.parse(dataJson);
    if (mydata.hasOwnProperty("Error")) {
      console.log(mydata);
    }
  }

  !ENV_DEBUG ? STREAM_URL = mydata.Data.channelSource[Math.floor(Math.random() * (mydata.Data.channelSource.length))].url + mydata.Data.StreamTimestampKey + mydata.Data.channelTable.phone : null;

  var player;

  function initPlayer() {
    VigoPlayer.load(() => {
      player = new VigoPlayer();
      if (/(Android)/i.test(navigator.userAgent)) {
        VigoPlayer.activeAudioEngine(true);
      }

      player.start(STREAM_URL);

      player.on("start", () => {
        // 当连接成功并收到数据
        if (PLAYER_DEBUG) console.log("Player Started!");
      });

      player.on("stop", () => {
        // 当本地stop或远端断开连接
        if (PLAYER_DEBUG) console.log("Player Stopped!");
      });

      player.on("error", (e) => {
        // 当连接错误或播放中发生错误
        if (PLAYER_DEBUG) console.log("Player Error: " + e);
      });

      player.on("videoInfo", (w, h) => {
        //当解析出视频信息时回调
        if (PLAYER_DEBUG) console.log("Player on video info width=" + w + " height=" + h);
      })

      player.on("audioInfo", (r, c) => {
        //当解析出音频信息时回调
        if (PLAYER_DEBUG) console.log("Player on audio info samplerate=" + r + " channels=" + c);
      })

      player.on("stats", (stats) => {
        // 每秒回调一次流统计信息
        if (PLAYER_DEBUG) console.log("Player on stats=", stats);
      })

      player.on("timeout", () => {
        if (PLAYER_DEBUG) console.log("Player on timeout");
        player.stop();
        player.start(url.value);
      })

      // player.useMSE();  //启用MSE硬解
      /**
       * 使用worker线程解码, 适用于多画面直播, 能有效利用多核处理器
       * 紧随 new 后调用
       */
      // player.useWorker();
      /**
         * 开启屏幕常亮
         * 在手机浏览器上,canvas标签渲染视频并不会像video标签那样保持屏幕常亮
         * 如果需要该功能, 可以调用此方法
         * H5目前在chrome\edge 84, android chrome 84及以上有原生亮屏API, 需要是https页面
         * 其余平台为模拟实现，非全兼容。
         */
      player.setKeepScreenOn();
      /**
       * 设置最大缓冲时长，单位毫秒，只在软解时有效
        */
      player.setBufferTime(1000);
      /**
       * 设置超时时长, 单位秒,只在软解时有效
       * 在连接成功之前和播放中途,如果超过设定时长无数据返回,则回调timeout事件
       */
      player.setTimeout(10);
      /**
       * 传入 canvas视图的id，当使用mse时，自动转换为video标签
       */
      player.setView("video");
      player.setScaleMode(0);
    });
  }



  function BatSound() { player.enableAudio(true); }
  function AudioSound(status) { player.enableAudio(status) };

</script>